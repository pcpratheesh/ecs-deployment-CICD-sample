# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Dep Workflow - Build and deploy to ECS

on:
  push:
    branches: 
      - staging
      - pre-production
      - production

# This action file only work after dev wirkflow
# on:
#   workflow_run:
#       workflows:
#         - Dev Workflow - Test and check thing
#       branches: 
#         - test-branch
#         - staging
#         - ios-dev
#         - pre-production
#         - production
#       types:
#         - completed


jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
     # extract branch name
    - name: Extract branch - Push
      if: github.event_name != 'pull_request'
      shell: bash
      run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      id: extract_branch

    # extract branch name on pull request
    - name: Extract branch - Pull Request
      if: github.event_name == 'pull_request'
      run: echo "BRANCH_NAME=${GITHUB_BASE_REF}" >> $GITHUB_ENV

    # print branch name
    - name: Print branch name
      run: echo 'The branch name is' $BRANCH_NAME

    - name: Set environment variables
      run: |
        case $BRANCH_NAME in
          staging)
            echo "ENVTAG=dev" >> $GITHUB_ENV
            ;;
          test-branch)
            echo "ENVTAG=dev" >> $GITHUB_ENV
            ;;
          pre-production)
            echo "ENVTAG=preprod" >> $GITHUB_ENV
            ;;
          production)
            echo "ENVTAG=prod" >> $GITHUB_ENV
            ;;
          *)
            echo "ENVTAG=unknown" >> $GITHUB_ENV
            ;;
        esac
      id: deployment_env
    
    # print branch name
    - name: Rendering On
      run: |
        echo 'The tag is' ${{ env.ENVTAG }}

    # Action checkout
    - name: Checkout
      uses: actions/checkout@v2

    # Configure aws
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    #Login to amazon    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    # Build image
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
    # Donwload existing task defenition
    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition service-${{ env.ENVTAG }} --query taskDefinition > task-definition.json

    # Fill
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: api
        image: ${{ steps.build-image.outputs.image }}

    # Deploy
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: backend-${{ env.ENVTAG }}
        cluster: ${{ secrets.AWS_ECS_CLUSTER }}
        wait-for-service-stability: true

